generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/**
 * -------------------------------------------
 * Identité = Better Auth (tables gérées par BA)
 * Domaine  = Prisma (AppUser + Company + License...)
 * -------------------------------------------
 */

model AppUser {
  id           String        @id @default(cuid())
  authUserId   String?       @unique
  email        String        @unique
  platformRole PlatformRole?
  memberships  CompanyUser[]

  // NEW
  firstName    String?
  lastName     String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum PlatformRole {
  SUPER_ADMIN
}

model Company {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  users     CompanyUser[]
  invites   Invite[]
  license   License?

  // NEW
  addressLine1 String?
  addressLine2 String?
  postalCode   String?
  city         String?
  country      String? @default("FR")
  phone        String?
  siret        String? @unique   // nullable + unique (OK sur Postgres)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model License {
  id        String        @id @default(cuid())
  companyId String        @unique
  seats     Int
  seatsUsed Int           @default(0)
  status    LicenseStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum LicenseStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
}

model CompanyUser {
  id        String      @id @default(cuid())
  appUserId String
  companyId String
  role      CompanyRole @default(MEMBER)

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    AppUser @relation(fields: [appUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([companyId, appUserId])
  @@index([companyId])
  @@index([appUserId])
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

model Invite {
  id        String      @id @default(cuid())
  companyId String
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  email     String
  role      CompanyRole @default(MEMBER)
  token     String      @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime    @default(now())

  @@index([companyId])
}

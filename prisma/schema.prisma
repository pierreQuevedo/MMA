// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  platformRole PlatformRole?
  memberships  CompanyUser[]
  sessions     Session[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum PlatformRole {
  SUPER_ADMIN
}

model Company {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  users     CompanyUser[]
  invites   Invite[]
  license   License?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model License {
  id        String        @id @default(cuid())
  companyId String        @unique
  seats     Int
  seatsUsed Int           @default(0)
  status    LicenseStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum LicenseStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
}

model CompanyUser {
  id        String      @id @default(cuid())
  userId    String
  companyId String
  role      CompanyRole @default(MEMBER)

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([userId])
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

model Invite {
  id        String      @id @default(cuid())
  companyId String
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  email     String
  role      CompanyRole @default(MEMBER)
  token     String      @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime    @default(now())

  @@index([companyId])
}
